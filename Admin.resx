<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>38</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        JDiZV4dDhf8P7GOveHmzXskAAAAASUVORK5CYII=
</value>
  </data>
</root>